package org.luffer.statisticaldistributions

import org.luffer.statisticaldistributions.utils.Tools

class StatisticalTables {

    private lateinit var tabz:Array<Array<String?>>
    private lateinit var cumulativeNormalProbabilityTable:Array<Array<String?>>
    private lateinit var tStudentTable: Array<Array<String?>>
    private lateinit var jiTable: Array<Array<String?>>

    init {
        fillRightTailOfProbabilityZ()
        fillCumulativeNormalProbabilityTable()
        fillTableTStudent()
        fillJiTable()

    }




    private fun fillRightTailOfProbabilityZ() {
        val lines = ArrayList<String>()
        lines.add("z--0.00--0.01--0.02--0.03--0.04--0.05--0.06--0.07--0.08--0.09--")
        lines.add("0.0--0.5000--0.4960--0.4920--0.4880--0.4840--0.4801--0.4761--0.4721--0.4681--0.4641--")
        lines.add("0.1--0.4602--0.4562--0.4522--0.4483--0.4443--0.4404--0.4364--0.4325--0.4286--0.4247--")
        lines.add("0.2--0.4207--0.4168--0.4129--0.4090--0.4052--0.4013--0.3974--0.3936--0.3897--0.3859--")
        lines.add("0.3--0.3821--0.3783--0.3745--0.3707--0.3669--0.3632--0.3594--0.3557--0.3520--0.3483--")
        lines.add("0.4--0.3446--0.3409--0.3372--0.3336--0.3300--0.3264--0.3228--0.3192--0.3156--0.3121--")
        lines.add("0.5--0.3085--0.3050--0.3015--0.2981--0.2946--0.2912--0.2877--0.2843--0.2810--0.2776--")
        lines.add("0.6--0.2743--0.2709--0.2676--0.2643--0.2611--0.2578--0.2546--0.2514--0.2483--0.2451--")
        lines.add("0.7--0.2420--0.2389--0.2358--0.2327--0.2296--0.2266--0.2236--0.2206--0.2177--0.2148--")
        lines.add("0.8--0.2119--0.2090--0.2061--0.2033--0.2005--0.1977--0.1949--0.1922--0.1894--0.1867--")
        lines.add("0.9--0.1841--0.1814--0.1788--0.1762--0.1736--0.1711--0.1685--0.1660--0.1635--0.1611--")
        lines.add("1.0--0.1587--0.1562--0.1539--0.1515--0.1492--0.1469--0.1446--0.1423--0.1401--0.1379--")
        lines.add("1.1--0.1357--0.1335--0.1314--0.1292--0.1271--0.1251--0.1230--0.1210--0.1190--0.1170--")
        lines.add("1.2--0.1151--0.1131--0.1112--0.1093--0.1075--0.1056--0.1038--0.1020--0.1003--0.0985--")
        lines.add("1.3--0.0968--0.0951--0.0934--0.0918--0.0901--0.0885--0.0869--0.0853--0.0838--0.0823--")
        lines.add("1.4--0.0808--0.0793--0.0778--0.0764--0.0749--0.0735--0.0721--0.0708--0.0694--0.0681--")
        lines.add("1.5--0.0668--0.0655--0.0643--0.0630--0.0618--0.0606--0.0594--0.0582--0.0571--0.0559--")
        lines.add("1.6--0.0548--0.0537--0.0526--0.0516--0.0505--0.0495--0.0485--0.0475--0.0465--0.0455--")
        lines.add("1.7--0.0446--0.0436--0.0427--0.0418--0.0409--0.0401--0.0392--0.0384--0.0375--0.0367--")
        lines.add("1.8--0.0359--0.0351--0.0344--0.0336--0.0329--0.0322--0.0314--0.0307--0.0301--0.0294--")
        lines.add("1.9--0.0287--0.0281--0.0274--0.0268--0.0262--0.0256--0.0250--0.0244--0.0239--0.0233--")
        lines.add("2.0--0.0228--0.0222--0.0217--0.0212--0.0207--0.0202--0.0197--0.0192--0.0188--0.0183--")
        lines.add("2.1--0.0179--0.0174--0.0170--0.0166--0.0162--0.0158--0.0154--0.0150--0.0146--0.0143--")
        lines.add("2.2--0.0139--0.0136--0.0132--0.0129--0.0125--0.0122--0.0119--0.0116--0.0113--0.0110--")
        lines.add("2.3--0.0107--0.0104--0.0102--0.0099--0.0096--0.0094--0.0091--0.0089--0.0087--0.0084--")
        lines.add("2.4--0.0082--0.0080--0.0078--0.0075--0.0073--0.0071--0.0069--0.0068--0.0066--0.0064--")
        lines.add("2.5--0.0062--0.0060--0.0059--0.0057--0.0055--0.0054--0.0052--0.0051--0.0049--0.0048--")
        lines.add("2.6--0.0047--0.0045--0.0044--0.0043--0.0041--0.0040--0.0039--0.0038--0.0037--0.0036--")
        lines.add("2.7--0.0035--0.0034--0.0033--0.0032--0.0031--0.0030--0.0029--0.0028--0.0027--0.0026--")
        lines.add("2.8--0.0026--0.0025--0.0024--0.0023--0.0023--0.0022--0.0021--0.0021--0.0020--0.0019--")
        lines.add("2.9--0.0019--0.0018--0.0018--0.0017--0.0016--0.0016--0.0015--0.0015--0.0014--0.0014--")
        lines.add("3.0--0.0013--0.0013--0.0013--0.0012--0.0012--0.0011--0.0011--0.0011--0.0010--0.0010--")
        lines.add("3.1--0.0010--0.0009--0.0009--0.0009--0.0008--0.0008--0.0008--0.0008--0.0007--0.0007--")
        lines.add("3.2--0.0007--0.0007--0.0006--0.0006--0.0006--0.0006--0.0006--0.0005--0.0005--0.0005--")
        lines.add("3.3--0.0005--0.0005--0.0005--0.0004--0.0004--0.0004--0.0004--0.0004--0.0004--0.0003--")
        lines.add("3.4--0.0003--0.0003--0.0003--0.0003--0.0003--0.0003--0.0003--0.0003--0.0003--0.0002--")
        lines.add("3.5--0.0002--0.0002--0.0002--0.0002--0.0002--0.0002--0.0002--0.0002--0.0002--0.0002--")

        this.tabz = Array(lines.size) {
            arrayOfNulls(
                11
            )
        }
        for (i in 0 until lines.size) {
            val auxLine = lines[i].split("--")
            for (j in auxLine.indices) {
                if (auxLine[j].isNotEmpty()){
                    tabz[i][j] = auxLine[j]
                }
            }
        }
    }


    private fun fillCumulativeNormalProbabilityTable() {
        val acumTableZ: ArrayList<String> = ArrayList()
        acumTableZ.add("z--0.00--0.01--0.02--0.03--0.04--0.05--0.06--0.07--0.08--0.09--")
        acumTableZ.add("-3.5--0.0002--0.0002--0.0002--0.0002--0.0002--0.0002--0.0002--0.0002--0.0002--0.0002--")
        acumTableZ.add("-3.4--0.0003--0.0003--0.0003--0.0003--0.0003--0.0003--0.0003--0.0003--0.0003--0.0002--")
        acumTableZ.add("-3.3--0.0005--0.0005--0.0005--0.0004--0.0004--0.0004--0.0004--0.0004--0.0004--0.0003--")
        acumTableZ.add("-3.2--0.0007--0.0007--0.0006--0.0006--0.0006--0.0006--0.0006--0.0005--0.0005--0.0005--")
        acumTableZ.add("-3.1--0.0010--0.0009--0.0009--0.0009--0.0008--0.0008--0.0008--0.0008--0.0007--0.0007--")
        acumTableZ.add("-3.0--0.0013--0.0013--0.0013--0.0012--0.0012--0.0011--0.0011--0.0011--0.0010--0.0010--")
        acumTableZ.add("-2.9--0.0019--0.0018--0.0018--0.0017--0.0016--0.0016--0.0015--0.0015--0.0014--0.0014--")
        acumTableZ.add("-2.8--0.0026--0.0025--0.0024--0.0023--0.0023--0.0022--0.0021--0.0021--0.0020--0.0019--")
        acumTableZ.add("-2.7--0.0035--0.0034--0.0033--0.0032--0.0031--0.0030--0.0029--0.0028--0.0027--0.0026--")
        acumTableZ.add("-2.6--0.0047--0.0045--0.0044--0.0043--0.0041--0.0040--0.0039--0.0038--0.0037--0.0036--")
        acumTableZ.add("-2.5--0.0062--0.0060--0.0059--0.0057--0.0055--0.0054--0.0052--0.0051--0.0049--0.0048--")
        acumTableZ.add("-2.4--0.0082--0.0080--0.0078--0.0075--0.0073--0.0071--0.0069--0.0068--0.0066--0.0064--")
        acumTableZ.add("-2.3--0.0107--0.0104--0.0102--0.0099--0.0096--0.0094--0.0091--0.0089--0.0087--0.0084--")
        acumTableZ.add("-2.2--0.0139--0.0136--0.0132--0.0129--0.0125--0.0122--0.0119--0.0116--0.0113--0.0110--")
        acumTableZ.add("-2.1--0.0179--0.0174--0.0170--0.0166--0.0162--0.0158--0.0154--0.0150--0.0146--0.0143--")
        acumTableZ.add("-2.0--0.0228--0.0222--0.0217--0.0212--0.0207--0.0202--0.0197--0.0192--0.0188--0.0183--")
        acumTableZ.add("-1.9--0.0287--0.0281--0.0274--0.0268--0.0262--0.0256--0.0250--0.0244--0.0239--0.0233--")
        acumTableZ.add("-1.8--0.0359--0.0351--0.0344--0.0336--0.0329--0.0322--0.0314--0.0307--0.0301--0.0294--")
        acumTableZ.add("-1.7--0.0446--0.0436--0.0427--0.0418--0.0409--0.0401--0.0392--0.0384--0.0375--0.0367--")
        acumTableZ.add("-1.6--0.0548--0.0537--0.0526--0.0516--0.0505--0.0495--0.0485--0.0475--0.0465--0.0455--")
        acumTableZ.add("-1.5--0.0668--0.0655--0.0643--0.0630--0.0618--0.0606--0.0594--0.0582--0.0571--0.0559--")
        acumTableZ.add("-1.4--0.0808--0.0793--0.0778--0.0764--0.0749--0.0735--0.0721--0.0708--0.0694--0.0681--")
        acumTableZ.add("-1.3--0.0968--0.0951--0.0934--0.0918--0.0901--0.0885--0.0869--0.0853--0.0838--0.0823--")
        acumTableZ.add("-1.2--0.1151--0.1131--0.1112--0.1093--0.1075--0.1056--0.1038--0.1020--0.1003--0.0985--")
        acumTableZ.add("-1.1--0.1357--0.1335--0.1314--0.1292--0.1271--0.1251--0.1230--0.1210--0.1190--0.1170--")
        acumTableZ.add("-1.0--0.1587--0.1562--0.1539--0.1515--0.1492--0.1469--0.1446--0.1423--0.1401--0.1379--")
        acumTableZ.add("-0.9--0.1841--0.1814--0.1788--0.1762--0.1736--0.1711--0.1685--0.1660--0.1635--0.1611--")
        acumTableZ.add("-0.8--0.2119--0.2090--0.2061--0.2033--0.2005--0.1977--0.1949--0.1922--0.1894--0.1867--")
        acumTableZ.add("-0.7--0.2420--0.2389--0.2358--0.2327--0.2296--0.2266--0.2236--0.2206--0.2177--0.2148--")
        acumTableZ.add("-0.6--0.2743--0.2709--0.2676--0.2643--0.2611--0.2578--0.2546--0.2514--0.2483--0.2451--")
        acumTableZ.add("-0.5--0.3085--0.3050--0.3015--0.2981--0.2946--0.2912--0.2877--0.2843--0.2810--0.2776--")
        acumTableZ.add("-0.4--0.3446--0.3409--0.3372--0.3336--0.3300--0.3264--0.3228--0.3192--0.3156--0.3121--")
        acumTableZ.add("-0.3--0.3821--0.3783--0.3745--0.3707--0.3669--0.3632--0.3594--0.3557--0.3520--0.3483--")
        acumTableZ.add("-0.2--0.4207--0.4168--0.4129--0.4090--0.4052--0.4013--0.3974--0.3936--0.3897--0.3859--")
        acumTableZ.add("-0.1--0.4602--0.4562--0.4522--0.4483--0.4443--0.4404--0.4364--0.4325--0.4286--0.4247--")
        acumTableZ.add("-0.0--0.5000--0.4960--0.4920--0.4880--0.4840--0.4801--0.4761--0.4721--0.4681--0.4641--")
        acumTableZ.add("0.0--0.5000--0.5040--0.5080--0.5120--0.5160--0.5199--0.5239--0.5279--0.5319--0.5359--")
        acumTableZ.add("0.1--0.5398--0.5438--0.5478--0.5517--0.5557--0.5596--0.5636--0.5675--0.5714--0.5753--")
        acumTableZ.add("0.2--0.5793--0.5832--0.5871--0.5910--0.5948--0.5987--0.6026--0.6064--0.6103--0.6141--")
        acumTableZ.add("0.3--0.6179--0.6217--0.6255--0.6293--0.6331--0.6368--0.6406--0.6443--0.6480--0.6517--")
        acumTableZ.add("0.4--0.6554--0.6591--0.6628--0.6664--0.6700--0.6736--0.6772--0.6808--0.6844--0.6879--")
        acumTableZ.add("0.5--0.6915--0.6950--0.6985--0.7019--0.7054--0.7088--0.7123--0.7157--0.7190--0.7224--")
        acumTableZ.add("0.6--0.7257--0.7291--0.7324--0.7357--0.7389--0.7422--0.7454--0.7486--0.7517--0.7549--")
        acumTableZ.add("0.7--0.7580--0.7611--0.7642--0.7673--0.7704--0.7734--0.7764--0.7794--0.7823--0.7852--")
        acumTableZ.add("0.8--0.7881--0.7910--0.7939--0.7967--0.7995--0.8023--0.8051--0.8078--0.8106--0.8133--")
        acumTableZ.add("0.9--0.8159--0.8186--0.8212--0.8238--0.8264--0.8289--0.8315--0.8340--0.8365--0.8389--")
        acumTableZ.add("1.0--0.8413--0.8438--0.8461--0.8485--0.8508--0.8531--0.8554--0.8577--0.8599--0.8621--")
        acumTableZ.add("1.1--0.8643--0.8665--0.8686--0.8708--0.8729--0.8749--0.8770--0.8790--0.8810--0.8830--")
        acumTableZ.add("1.2--0.8849--0.8869--0.8888--0.8907--0.8925--0.8944--0.8962--0.8980--0.8997--0.9015--")
        acumTableZ.add("1.3--0.9032--0.9049--0.9066--0.9082--0.9099--0.9115--0.9131--0.9147--0.9162--0.9177--")
        acumTableZ.add("1.4--0.9192--0.9207--0.9222--0.9236--0.9251--0.9265--0.9279--0.9292--0.9306--0.9319--")
        acumTableZ.add("1.5--0.9332--0.9345--0.9357--0.9370--0.9382--0.9394--0.9406--0.9418--0.9429--0.9441--")
        acumTableZ.add("1.6--0.9452--0.9463--0.9474--0.9484--0.9495--0.9505--0.9515--0.9525--0.9535--0.9545--")
        acumTableZ.add("1.7--0.9554--0.9564--0.9573--0.9582--0.9591--0.9599--0.9608--0.9616--0.9625--0.9633--")
        acumTableZ.add("1.8--0.9641--0.9649--0.9656--0.9664--0.9671--0.9678--0.9686--0.9693--0.9699--0.9706--")
        acumTableZ.add("1.9--0.9713--0.9719--0.9726--0.9732--0.9738--0.9744--0.9750--0.9756--0.9761--0.9767--")
        acumTableZ.add("2.0--0.9772--0.9778--0.9783--0.9788--0.9793--0.9798--0.9803--0.9808--0.9812--0.9817--")
        acumTableZ.add("2.1--0.9821--0.9826--0.9830--0.9834--0.9838--0.9842--0.9846--0.9850--0.9854--0.9857--")
        acumTableZ.add("2.2--0.9861--0.9864--0.9868--0.9871--0.9875--0.9878--0.9881--0.9884--0.9887--0.9890--")
        acumTableZ.add("2.3--0.9893--0.9896--0.9898--0.9901--0.9904--0.9906--0.9909--0.9911--0.9913--0.9916--")
        acumTableZ.add("2.4--0.9918--0.9920--0.9922--0.9925--0.9927--0.9929--0.9931--0.9932--0.9934--0.9936--")
        acumTableZ.add("2.5--0.9938--0.9940--0.9941--0.9943--0.9945--0.9946--0.9948--0.9949--0.9951--0.9952--")
        acumTableZ.add("2.6--0.9953--0.9955--0.9956--0.9957--0.9959--0.9960--0.9961--0.9962--0.9963--0.9964--")
        acumTableZ.add("2.7--0.9965--0.9966--0.9967--0.9968--0.9969--0.9970--0.9971--0.9972--0.9973--0.9974--")
        acumTableZ.add("2.8--0.9974--0.9975--0.9976--0.9977--0.9977--0.9978--0.9979--0.9979--0.9980--0.9981--")
        acumTableZ.add("2.9--0.9981--0.9982--0.9982--0.9983--0.9984--0.9984--0.9985--0.9985--0.9986--0.9986--")
        acumTableZ.add("3.0--0.9987--0.9987--0.9987--0.9988--0.9988--0.9989--0.9989--0.9989--0.9990--0.9990--")
        acumTableZ.add("3.1--0.9990--0.9991--0.9991--0.9991--0.9992--0.9992--0.9992--0.9992--0.9993--0.9993--")
        acumTableZ.add("3.2--0.9993--0.9993--0.9994--0.9994--0.9994--0.9994--0.9994--0.9995--0.9995--0.9995--")
        acumTableZ.add("3.3--0.9995--0.9995--0.9995--0.9996--0.9996--0.9996--0.9996--0.9996--0.9996--0.9997--")
        acumTableZ.add("3.4--0.9997--0.9997--0.9997--0.9997--0.9997--0.9997--0.9997--0.9997--0.9997--0.9998--")
        acumTableZ.add("3.5--0.9998--0.9998--0.9998--0.9998--0.9998--0.9998--0.9998--0.9998--0.9998--0.9998--")

        this.cumulativeNormalProbabilityTable = Array<Array<String?>>(acumTableZ.size) {
            arrayOfNulls<String>(
                11
            )
        }


        for (i in 0 until acumTableZ.size) {
            val auxLine = acumTableZ[i].split("--")
            for (j in auxLine.indices) {
                if (auxLine[j].isNotEmpty()){
                    this.cumulativeNormalProbabilityTable[i][j] = auxLine[j]
                }
            }
        }
    }

    private fun fillTableTStudent() {
        val tabTStudentLines = ArrayList<String>()
        tabTStudentLines.add("n--0.0005--0.0010--0.0015--0.0020--0.0025--0.0030--0.0035--0.0040--0.0045--0.0050--0.0055--0.0060--0.0065--0.0070--0.0075--0.0080--0.0085--0.0090--0.0095--0.010--0.015--0.020--0.025--0.030--0.035--0.040--0.045--0.050--0.055--0.060--0.065--0.070--0.075--0.080--0.085--0.090--0.095--0.10--0.15--0.20--0.25--0.30--0.35--0.40--0.45--")
        tabTStudentLines.add("1--636.58--318.29--212.19--159.14--127.32--106.10--90.944--79.572--70.729--63.656--57.868--53.046--48.964--45.465--42.433--39.780--37.439--35.359--33.496--31.821--21.205--15.894--12.706--10.579--9.058--7.916--7.026--6.314--5.730--5.242--4.8288--4.4737--4.1653--3.8947--3.6554--3.4420--3.2506--3.0777--1.9626--1.3764--1.0000--0.7265--0.5095--0.3249--0.1584--")
        tabTStudentLines.add("2--31.600--22.328--18.217--15.764--14.089--12.852--11.889--11.113--10.470--9.925--9.456--9.046--8.685--8.363--8.073--7.810--7.572--7.353--7.151--6.965--5.643--4.849--4.303--3.896--3.578--3.320--3.104--2.920--2.760--2.620--2.4954--2.3834--2.2819--2.1894--2.1045--2.0261--1.9534--1.8856--1.3862--1.0607--0.8165--0.6172--0.4447--0.2887--0.1421--")
        tabTStudentLines.add("3--12.924--10.214--8.891--8.052--7.453--6.994--6.627--6.322--6.064--5.841--5.645--5.472--5.316--5.175--5.047--4.930--4.821--4.721--4.628--4.541--3.896--3.482--3.182--2.951--2.763--2.605--2.471--2.353--2.249--2.156--2.0719--1.9950--1.9243--1.8589--1.7981--1.7413--1.6880--1.6377--1.2498--0.9785--0.7649--0.5844--0.4242--0.2767--0.1366--")
        tabTStudentLines.add("4--8.610--7.173--6.435--5.951--5.598--5.321--5.096--4.908--4.746--4.604--4.479--4.367--4.265--4.173--4.088--4.010--3.937--3.870--3.806--3.747--3.298--2.999--2.776--2.601--2.456--2.333--2.226--2.132--2.048--1.971--1.9016--1.8375--1.7782--1.7229--1.6712--1.6226--1.5767--1.5332--1.1896--0.9410--0.7407--0.5686--0.4142--0.2707--0.1338--")
        tabTStudentLines.add("5--6.869--5.894--5.376--5.030--4.773--4.570--4.403--4.262--4.140--4.032--3.936--3.850--3.772--3.700--3.634--3.573--3.516--3.462--3.412--3.365--3.003--2.757--2.571--2.422--2.297--2.191--2.098--2.015--1.941--1.873--1.8104--1.7529--1.6994--1.6493--1.6023--1.5579--1.5158--1.4759--1.1558--0.9195--0.7267--0.5594--0.4082--0.2672--0.1322--")
        tabTStudentLines.add("6--5.959--5.208--4.800--4.524--4.317--4.152--4.015--3.898--3.797--3.707--3.627--3.555--3.489--3.428--3.372--3.320--3.272--3.226--3.183--3.143--2.829--2.612--2.447--2.313--2.201--2.104--2.019--1.943--1.874--1.812--1.7538--1.7002--1.6502--1.6033--1.5590--1.5172--1.4775--1.4398--1.1342--0.9057--0.7176--0.5534--0.4043--0.2648--0.1311--")
        tabTStudentLines.add("7--5.408--4.785--4.442--4.207--4.029--3.887--3.768--3.667--3.578--3.499--3.429--3.365--3.307--3.253--3.203--3.157--3.113--3.073--3.034--2.998--2.715--2.517--2.365--2.241--2.136--2.046--1.966--1.895--1.830--1.770--1.7153--1.6643--1.6166--1.5718--1.5295--1.4894--1.4513--1.4149--1.1192--0.8960--0.7111--0.5491--0.4015--0.2632--0.1303--")
        tabTStudentLines.add("8--5.041--4.501--4.199--3.991--3.833--3.705--3.598--3.507--3.427--3.355--3.291--3.233--3.180--3.131--3.085--3.043--3.003--2.965--2.930--2.896--2.634--2.449--2.306--2.189--2.090--2.004--1.928--1.860--1.797--1.740--1.6874--1.6383--1.5922--1.5489--1.5079--1.4691--1.4321--1.3968--1.1081--0.8889--0.7064--0.5459--0.3995--0.2619--0.1297--")
        tabTStudentLines.add("9--4.781--4.297--4.024--3.835--3.690--3.573--3.474--3.390--3.316--3.250--3.190--3.136--3.087--3.041--2.998--2.958--2.921--2.886--2.853--2.821--2.574--2.398--2.262--2.150--2.055--1.973--1.899--1.833--1.773--1.718--1.6663--1.6185--1.5737--1.5315--1.4916--1.4537--1.4175--1.3830--1.0997--0.8834--0.7027--0.5435--0.3979--0.2610--0.1293--")
        tabTStudentLines.add("10--4.587--4.144--3.892--3.716--3.581--3.472--3.380--3.301--3.231--3.169--3.113--3.062--3.015--2.972--2.932--2.894--2.859--2.825--2.794--2.764--2.527--2.359--2.228--2.120--2.028--1.948--1.877--1.812--1.754--1.700--1.6498--1.6031--1.5592--1.5179--1.4788--1.4416--1.4061--1.3722--1.0931--0.8791--0.6998--0.5415--0.3966--0.2602--0.1289--")
        tabTStudentLines.add("11--4.437--4.025--3.789--3.624--3.497--3.393--3.306--3.231--3.165--3.106--3.052--3.004--2.959--2.917--2.879--2.843--2.809--2.777--2.747--2.718--2.491--2.328--2.201--2.096--2.007--1.928--1.859--1.796--1.738--1.686--1.6365--1.5906--1.5476--1.5069--1.4684--1.4318--1.3969--1.3634--1.0877--0.8755--0.6974--0.5399--0.3956--0.2596--0.1286--")
        tabTStudentLines.add("12--4.318--3.930--3.707--3.550--3.428--3.330--3.247--3.175--3.111--3.055--3.003--2.956--2.913--2.873--2.836--2.801--2.769--2.738--2.709--2.681--2.461--2.303--2.179--2.076--1.989--1.912--1.844--1.782--1.726--1.674--1.6256--1.5804--1.5380--1.4979--1.4599--1.4237--1.3892--1.3562--1.0832--0.8726--0.6955--0.5386--0.3947--0.2590--0.1283--")
        tabTStudentLines.add("13--4.221--3.852--3.639--3.489--3.372--3.278--3.198--3.128--3.067--3.012--2.963--2.917--2.876--2.837--2.801--2.767--2.736--2.706--2.677--2.650--2.436--2.282--2.160--2.060--1.974--1.899--1.832--1.771--1.715--1.664--1.6164--1.5718--1.5299--1.4903--1.4528--1.4170--1.3829--1.3502--1.0795--0.8702--0.6938--0.5375--0.3940--0.2586--0.1281--")
        tabTStudentLines.add("14--4.140--3.787--3.583--3.438--3.326--3.234--3.157--3.089--3.030--2.977--2.929--2.885--2.844--2.807--2.771--2.739--2.708--2.678--2.651--2.624--2.415--2.264--2.145--2.046--1.962--1.887--1.821--1.761--1.706--1.656--1.6087--1.5646--1.5231--1.4839--1.4467--1.4113--1.3774--1.3450--1.0763--0.8681--0.6924--0.5366--0.3933--0.2582--0.1280--")
        tabTStudentLines.add("15--4.073--3.733--3.535--3.395--3.286--3.197--3.122--3.056--2.998--2.947--2.900--2.857--2.817--2.780--2.746--2.714--2.684--2.655--2.628--2.602--2.397--2.249--2.131--2.034--1.951--1.878--1.812--1.753--1.699--1.649--1.6020--1.5583--1.5172--1.4784--1.4415--1.4063--1.3728--1.3406--1.0735--0.8662--0.6912--0.5357--0.3928--0.2579--0.1278--")
        tabTStudentLines.add("16--4.015--3.686--3.494--3.358--3.252--3.165--3.092--3.028--2.971--2.921--2.875--2.833--2.794--2.758--2.724--2.693--2.663--2.635--2.609--2.583--2.382--2.235--2.120--2.024--1.942--1.869--1.805--1.746--1.692--1.642--1.5962--1.5529--1.5121--1.4736--1.4369--1.4021--1.3687--1.3368--1.0711--0.8647--0.6901--0.5350--0.3923--0.2576--0.1277--")
        tabTStudentLines.add("17--3.965--3.646--3.459--3.326--3.222--3.138--3.066--3.003--2.948--2.898--2.853--2.812--2.774--2.739--2.706--2.675--2.645--2.618--2.592--2.567--2.368--2.224--2.110--2.015--1.934--1.862--1.798--1.740--1.686--1.637--1.5911--1.5482--1.5077--1.4694--1.4330--1.3983--1.3652--1.3334--1.0690--0.8633--0.6892--0.5344--0.3919--0.2573--0.1276--")
        tabTStudentLines.add("18--3.922--3.610--3.428--3.298--3.197--3.113--3.043--2.982--2.927--2.878--2.834--2.794--2.756--2.721--2.689--2.658--2.630--2.603--2.577--2.552--2.356--2.214--2.101--2.007--1.926--1.855--1.792--1.734--1.681--1.632--1.5867--1.5439--1.5037--1.4656--1.4295--1.3950--1.3620--1.3304--1.0672--0.8620--0.6884--0.5338--0.3915--0.2571--0.1274--")
        tabTStudentLines.add("19--3.883--3.579--3.401--3.273--3.174--3.092--3.023--2.962--2.909--2.861--2.817--2.777--2.740--2.706--2.674--2.644--2.616--2.589--2.564--2.539--2.346--2.205--2.093--2.000--1.920--1.850--1.786--1.729--1.677--1.628--1.5827--1.5402--1.5002--1.4623--1.4263--1.3920--1.3592--1.3277--1.0655--0.8610--0.6876--0.5333--0.3912--0.2569--0.1274--")
        tabTStudentLines.add("20--3.850--3.552--3.376--3.251--3.153--3.073--3.005--2.945--2.893--2.845--2.802--2.763--2.727--2.693--2.661--2.631--2.603--2.577--2.552--2.528--2.336--2.197--2.086--1.994--1.914--1.844--1.782--1.725--1.672--1.624--1.5791--1.5369--1.4970--1.4593--1.4235--1.3894--1.3567--1.3253--1.0640--0.8600--0.6870--0.5329--0.3909--0.2567--0.1273--")
        tabTStudentLines.add("21--3.819--3.527--3.355--3.231--3.135--3.056--2.989--2.930--2.878--2.831--2.789--2.750--2.714--2.681--2.649--2.620--2.592--2.566--2.541--2.518--2.328--2.189--2.080--1.988--1.909--1.840--1.777--1.721--1.669--1.621--1.5759--1.5338--1.4942--1.4567--1.4210--1.3870--1.3544--1.3232--1.0627--0.8591--0.6864--0.5325--0.3906--0.2566--0.1272--")
        tabTStudentLines.add("22--3.792--3.505--3.335--3.214--3.119--3.041--2.974--2.916--2.865--2.819--2.777--2.738--2.703--2.670--2.639--2.610--2.582--2.556--2.532--2.508--2.320--2.183--2.074--1.983--1.905--1.835--1.773--1.717--1.665--1.618--1.5730--1.5311--1.4916--1.4542--1.4187--1.3848--1.3524--1.3212--1.0614--0.8583--0.6858--0.5321--0.3904--0.2564--0.1271--")
        tabTStudentLines.add("23--3.768--3.485--3.318--3.198--3.104--3.027--2.961--2.904--2.853--2.807--2.766--2.728--2.692--2.660--2.629--2.600--2.573--2.547--2.523--2.500--2.313--2.177--2.069--1.978--1.900--1.832--1.770--1.714--1.662--1.615--1.5703--1.5286--1.4893--1.4520--1.4166--1.3828--1.3505--1.3195--1.0603--0.8575--0.6853--0.5317--0.3902--0.2563--0.1271--")
        tabTStudentLines.add("24--3.745--3.467--3.302--3.183--3.091--3.014--2.949--2.892--2.842--2.797--2.756--2.718--2.683--2.651--2.620--2.592--2.565--2.539--2.515--2.492--2.307--2.172--2.064--1.974--1.896--1.828--1.767--1.711--1.660--1.612--1.5679--1.5263--1.4871--1.4500--1.4147--1.3810--1.3488--1.3178--1.0593--0.8569--0.6848--0.5314--0.3900--0.2562--0.1270--")
        tabTStudentLines.add("25--3.725--3.450--3.287--3.170--3.078--3.003--2.938--2.882--2.832--2.787--2.747--2.709--2.675--2.642--2.612--2.584--2.557--2.532--2.508--2.485--2.301--2.167--2.060--1.970--1.893--1.825--1.764--1.708--1.657--1.610--1.5657--1.5242--1.4852--1.4482--1.4130--1.3794--1.3472--1.3163--1.0584--0.8562--0.6844--0.5312--0.3898--0.2561--0.1269--")
        tabTStudentLines.add("26--3.707--3.435--3.274--3.158--3.067--2.992--2.928--2.873--2.823--2.779--2.738--2.701--2.667--2.635--2.605--2.577--2.550--2.525--2.501--2.479--2.296--2.162--2.056--1.967--1.890--1.822--1.761--1.706--1.655--1.608--1.5636--1.5223--1.4834--1.4464--1.4113--1.3778--1.3458--1.3150--1.0575--0.8557--0.6840--0.5309--0.3896--0.2560--0.1269--")
        tabTStudentLines.add("27--3.689--3.421--3.261--3.146--3.057--2.982--2.919--2.864--2.815--2.771--2.731--2.694--2.660--2.628--2.598--2.570--2.544--2.519--2.495--2.473--2.291--2.158--2.052--1.963--1.887--1.819--1.758--1.703--1.653--1.606--1.5617--1.5205--1.4817--1.4449--1.4098--1.3764--1.3444--1.3137--1.0567--0.8551--0.6837--0.5306--0.3894--0.2559--0.1268--")
        tabTStudentLines.add("28--3.674--3.408--3.250--3.136--3.047--2.973--2.911--2.856--2.807--2.763--2.723--2.687--2.653--2.621--2.592--2.564--2.538--2.513--2.490--2.467--2.286--2.154--2.048--1.960--1.884--1.817--1.756--1.701--1.651--1.604--1.5600--1.5189--1.4801--1.4434--1.4085--1.3751--1.3432--1.3125--1.0560--0.8546--0.6834--0.5304--0.3893--0.2558--0.1268--")
        tabTStudentLines.add("29--3.660--3.396--3.239--3.127--3.038--2.965--2.903--2.848--2.800--2.756--2.717--2.680--2.647--2.615--2.586--2.558--2.532--2.508--2.484--2.462--2.282--2.150--2.045--1.957--1.881--1.814--1.754--1.699--1.649--1.602--1.5583--1.5174--1.4787--1.4421--1.4072--1.3739--1.3420--1.3114--1.0553--0.8542--0.6830--0.5302--0.3892--0.2557--0.1268--")
        tabTStudentLines.add("30--3.646--3.385--3.230--3.118--3.030--2.957--2.895--2.841--2.793--2.750--2.711--2.674--2.641--2.610--2.581--2.553--2.527--2.503--2.479--2.457--2.278--2.147--2.042--1.955--1.879--1.812--1.752--1.697--1.647--1.600--1.5568--1.5159--1.4774--1.4408--1.4060--1.3728--1.3410--1.3104--1.0547--0.8538--0.6828--0.5300--0.3890--0.2556--0.1267--")
        tabTStudentLines.add("40--3.551--3.307--3.160--3.055--2.971--2.902--2.843--2.792--2.746--2.704--2.667--2.632--2.600--2.570--2.542--2.516--2.491--2.467--2.445--2.423--2.250--2.123--2.021--1.936--1.862--1.796--1.737--1.684--1.635--1.589--1.5459--1.5057--1.4677--1.4317--1.3974--1.3646--1.3332--1.3031--1.0500--0.8507--0.6807--0.5286--0.3881--0.2550--0.1265--")
        tabTStudentLines.add("50--3.496--3.261--3.120--3.018--2.937--2.870--2.813--2.763--2.718--2.678--2.641--2.607--2.576--2.547--2.519--2.494--2.469--2.446--2.424--2.403--2.234--2.109--2.009--1.924--1.852--1.787--1.729--1.676--1.627--1.582--1.5394--1.4996--1.4620--1.4263--1.3923--1.3598--1.3286--1.2987--1.0473--0.8489--0.6794--0.5278--0.3875--0.2547--0.1263--")
        tabTStudentLines.add("60--3.460--3.232--3.094--2.994--2.915--2.849--2.793--2.744--2.700--2.660--2.624--2.591--2.560--2.531--2.504--2.479--2.455--2.432--2.411--2.390--2.223--2.099--2.000--1.917--1.845--1.781--1.723--1.671--1.622--1.577--1.5352--1.4956--1.4582--1.4227--1.3889--1.3566--1.3256--1.2958--1.0455--0.8477--0.6786--0.5272--0.3872--0.2545--0.1262--")
        tabTStudentLines.add("70--3.435--3.211--3.075--2.977--2.899--2.834--2.779--2.730--2.687--2.648--2.612--2.579--2.549--2.521--2.494--2.469--2.445--2.423--2.401--2.381--2.215--2.093--1.994--1.912--1.840--1.776--1.719--1.667--1.619--1.574--1.5321--1.4927--1.4555--1.4202--1.3865--1.3543--1.3234--1.2938--1.0442--0.8468--0.6780--0.5268--0.3869--0.2543--0.1261--")
        tabTStudentLines.add("80--3.416--3.195--3.061--2.964--2.887--2.823--2.768--2.720--2.677--2.639--2.603--2.571--2.541--2.512--2.486--2.461--2.438--2.415--2.394--2.374--2.209--2.088--1.990--1.908--1.836--1.773--1.716--1.664--1.616--1.572--1.5298--1.4906--1.4535--1.4183--1.3847--1.3526--1.3218--1.2922--1.0432--0.8461--0.6776--0.5265--0.3867--0.2542--0.1261--")
        tabTStudentLines.add("90--3.402--3.183--3.051--2.954--2.878--2.815--2.760--2.713--2.670--2.632--2.596--2.564--2.534--2.506--2.480--2.455--2.432--2.410--2.389--2.368--2.205--2.084--1.987--1.905--1.834--1.771--1.714--1.662--1.614--1.570--1.5281--1.4889--1.4519--1.4168--1.3833--1.3513--1.3205--1.2910--1.0424--0.8456--0.6772--0.5263--0.3866--0.2541--0.1260--")
        tabTStudentLines.add("100--3.390--3.174--3.042--2.946--2.871--2.808--2.754--2.706--2.664--2.626--2.591--2.559--2.529--2.501--2.475--2.451--2.427--2.405--2.384--2.364--2.201--2.081--1.984--1.902--1.832--1.769--1.712--1.660--1.613--1.568--1.5267--1.4876--1.4507--1.4156--1.3822--1.3502--1.3195--1.2901--1.0418--0.8452--0.6770--0.5261--0.3864--0.2540--0.1260--")

        tStudentTable = Array<Array<String?>>(38) {
            arrayOfNulls<String>(
                46
            )
        }

        for (i in 0 until tabTStudentLines.size) {
            val auxLine = tabTStudentLines[i].split("--")
            for (j in auxLine.indices) {
                if (auxLine[j].isNotEmpty()) {
                    this.tStudentTable[i][j] = auxLine[j]
                }
            }
        }
    }

    private fun fillJiTable() {
        val linesTabJi = ArrayList<String>()

        linesTabJi.add("gl--0.005--0.01--0.015--0.02--0.025--0.03--0.035--0.04--0.045--0.05--0.055--0.06--0.065--0.07--0.075--0.08--0.085--0.09--0.095--0.1--0.125--0.15--0.175--0.2--0.225--0.25--0.275--0.3--0.325--0.35--0.375--0.4--0.425--0.45--0.475--0.5--0.525--0.55--0.575--0.6--0.625--0.65--0.675--0.7--0.725--0.75--0.775--0.8--0.825--0.85--0.875--0.9--0.905--0.91--0.915--0.92--0.925--0.93--0.935--0.94--0.945--0.95--0.955--0.96--0.965--0.97--0.975--0.98--0.985--0.99--0.995--")
        linesTabJi.add("1--7.8794--6.6349--5.9165--5.4119--5.0239--4.7093--4.4452--4.2179--4.0186--3.8415--3.6821--3.5374--3.405--3.283--3.1701--3.0649--2.9666--2.8744--2.7875--2.7055--2.3535--2.0722--1.8396--1.6424--1.4722--1.3233--1.1916--1.0742--0.9687--0.8735--0.787--0.7083--0.6364--0.5707--0.5103--0.4549--0.4041--0.3573--0.3144--0.275--0.2389--0.2059--0.1758--0.1485--0.1238--0.1015--0.0817--0.0642--0.0489--0.0358--0.0247--0.0158--0.0142--0.0128--0.0114--0.0101--0.0089--0.0077--0.0067--0.0057--0.0048--0.0039--0.0032--0.0025--0.0019--0.0014--0.001--0.0006--0.0004--0.0002--0--")
        linesTabJi.add("2--10.5965--9.2104--8.3994--7.8241--7.3778--7.0131--6.7048--6.4377--6.2022--5.9915--5.8008--5.6268--5.4667--5.3185--5.1805--5.0515--4.9302--4.8159--4.7078--4.6052--4.1589--3.7942--3.4859--3.2189--2.9833--2.7726--2.582--2.4079--2.2479--2.0996--1.9617--1.8326--1.7113--1.597--1.4889--1.3863--1.2887--1.1957--1.1068--1.0217--0.94--0.8616--0.7861--0.7133--0.6432--0.5754--0.5098--0.4463--0.3847--0.325--0.2671--0.2107--0.1996--0.1886--0.1777--0.1668--0.1559--0.1451--0.1344--0.1238--0.1131--0.1026--0.0921--0.0816--0.0713--0.0609--0.0506--0.0404--0.0302--0.0201--0.01--")
        linesTabJi.add("3--12.8381--11.3449--10.4651--9.8374--9.3484--8.9473--8.6069--8.3112--8.0495--7.8147--7.6018--7.4069--7.2271--7.0603--6.9046--6.7587--6.6213--6.4915--6.3684--6.2514--5.7394--5.317--4.9566--4.6416--4.3613--4.1083--3.8775--3.6649--3.4675--3.2831--3.1098--2.9462--2.7909--2.643--2.5016--2.366--2.2354--2.1095--1.9875--1.8692--1.754--1.6416--1.5316--1.4237--1.3174--1.2125--1.1086--1.0052--0.9018--0.7978--0.6924--0.5844--0.5623--0.5401--0.5176--0.4949--0.472--0.4487--0.4251--0.4012--0.3768--0.3518--0.3263--0.3002--0.2731--0.2451--0.2158--0.1848--0.1516--0.1148--0.0717--")
        linesTabJi.add("4--14.8602--13.2767--12.3391--11.6678--11.1433--10.7119--10.345--10.0255--9.7423--9.4877--9.2564--9.0444--8.8485--8.6664--8.4963--8.3365--8.1859--8.0434--7.9082--7.7794--7.214--6.7449--6.3423--5.9886--5.6722--5.3853--5.1221--4.8784--4.6511--4.4377--4.2361--4.0446--3.862--3.6871--3.519--3.3567--3.1996--3.0469--2.8982--2.7528--2.6103--2.4701--2.3317--2.1947--2.0585--1.9226--1.7862--1.6488--1.5093--1.3665--1.2188--1.0636--1.0314--0.9987--0.9654--0.9315--0.8969--0.8616--0.8255--0.7884--0.7502--0.7107--0.6698--0.6271--0.5824--0.5351--0.4844--0.4294--0.3682--0.2971--0.207--")
        linesTabJi.add("5--16.7496--15.0863--14.0978--13.3882--12.8325--12.3746--11.9846--11.6443--11.3423--11.0705--10.8232--10.5962--10.3863--10.191--10.0083--9.8366--9.6745--9.5211--9.3753--9.2363--8.6248--8.1152--7.6763--7.2893--6.9419--6.6257--6.3347--6.0644--5.8115--5.5731--5.3471--5.1319--4.9258--4.7278--4.5366--4.3515--4.1715--3.9959--3.8242--3.6555--3.4893--3.3251--3.1622--2.9999--2.8376--2.6746--2.5099--2.3425--2.1711--1.9938--1.8082--1.6103--1.5688--1.5264--1.4832--1.439--1.3937--1.3472--1.2993--1.2499--1.1987--1.1455--1.0898--1.0313--0.9693--0.9031--0.8312--0.7519--0.6618--0.5543--0.4118--")
        linesTabJi.add("6--18.5475--16.8119--15.7774--15.0332--14.4494--13.9676--13.5567--13.1978--12.8789--12.5916--12.3299--12.0896--11.8671--11.6599--11.4659--11.2835--11.1112--10.9479--10.7926--10.6446--9.9917--9.4461--8.9748--8.5581--8.183--7.8408--7.5251--7.2311--6.9553--6.6948--6.4472--6.2108--5.9839--5.7652--5.5536--5.3481--5.1478--4.9519--4.7596--4.5702--4.383--4.1973--4.0124--3.8276--3.6419--3.4546--3.2644--3.0701--2.8698--2.6613--2.4411--2.2041--2.154--2.1029--2.0505--1.9967--1.9415--1.8846--1.8258--1.7649--1.7016--1.6354--1.5659--1.4924--1.414--1.3296--1.2373--1.1344--1.016--0.8721--0.6757--")
        linesTabJi.add("7--20.2777--18.4753--17.3984--16.6224--16.0128--15.5091--15.079--14.703--14.3686--14.0671--13.7924--13.5397--13.3058--13.0877--12.8834--12.6912--12.5095--12.3372--12.1734--12.017--11.3264--10.7479--10.2471--9.8032--9.403--9.0371--8.6989--8.3834--8.0868--7.8061--7.5389--7.2832--7.0374--6.8--6.5698--6.3458--6.127--5.9125--5.7015--5.4932--5.2869--5.0816--4.8768--4.6713--4.4644--4.2549--4.0414--3.8223--3.5956--3.3583--3.1063--2.8331--2.7751--2.7157--2.6548--2.5921--2.5277--2.4611--2.3921--2.3205--2.2457--2.1673--2.0848--1.9971--1.9033--1.8016--1.6899--1.5643--1.4184--1.239--0.9893--")
        linesTabJi.add("8--21.9549--20.0902--18.9738--18.1682--17.5345--17.0105--16.5626--16.1708--15.822--15.5073--15.2203--14.9563--14.7117--14.4836--14.2697--14.0684--13.8781--13.6975--13.5256--13.3616--12.6361--12.0271--11.4989--11.0301--10.6066--10.2189--9.8599--9.5245--9.2087--8.9094--8.624--8.3505--8.0872--7.8325--7.5852--7.3441--7.1082--6.8766--6.6484--6.4226--6.1986--5.9753--5.7519--5.5274--5.3008--5.0706--4.8355--4.5936--4.3422--4.0782--3.7965--3.4895--3.4241--3.357--3.2881--3.2172--3.144--3.0683--2.9897--2.908--2.8225--2.7326--2.6377--2.5367--2.4281--2.3101--2.1797--2.0325--1.8603--1.6465--1.3444--")
        linesTabJi.add("9--23.5893--21.666--20.5125--19.679--19.0228--18.4796--18.015--17.6083--17.246--16.919--16.6206--16.3459--16.0913--15.8537--15.6309--15.4211--15.2226--15.0342--14.8549--14.6837--13.9255--13.288--12.7343--12.2421--11.797--11.3887--11.0104--10.6564--10.3227--10.006--9.7037--9.4136--9.134--8.8632--8.5999--8.3428--8.091--7.8434--7.5991--7.357--7.1164--6.8763--6.6356--6.3933--6.1482--5.8988--5.6435--5.3801--5.1057--4.8165--4.507--4.1682--4.0957--4.0214--3.9449--3.8661--3.7847--3.7004--3.6128--3.5215--3.4258--3.3251--3.2185--3.1047--2.9821--2.8485--2.7004--2.5324--2.3348--2.0879--1.7349--")
        linesTabJi.add("10--25.1881--23.2093--22.0206--21.1608--20.4832--19.9219--19.4415--19.0208--18.6457--18.307--17.9978--17.7131--17.449--17.2026--16.9714--16.7535--16.5473--16.3516--16.1652--15.9872--15.1982--14.5339--13.9562--13.442--12.9763--12.5489--12.1522--11.7807--11.4302--11.0971--10.7789--10.4732--10.1782--9.8922--9.6138--9.3418--9.075--8.8124--8.5528--8.2955--8.0393--7.7832--7.5263--7.2672--7.0047--6.7372--6.4628--6.1791--5.8829--5.5701--5.2341--4.8652--4.7861--4.7049--4.6213--4.535--4.4459--4.3534--4.2572--4.1567--4.0514--3.9403--3.8225--3.6965--3.5606--3.4121--3.247--3.0591--2.8372--2.5582--2.1558--")
        linesTabJi.add("11--26.7569--24.725--23.5028--22.6179--21.92--21.3416--20.8462--20.412--20.0249--19.6752--19.3557--19.0614--18.7884--18.5334--18.2942--18.0687--17.8553--17.6526--17.4595--17.275--16.4568--15.7671--15.1665--14.6314--14.1464--13.7007--13.2867--12.8987--12.5321--12.1836--11.8503--11.5298--11.2203--10.9199--10.6272--10.341--10.06--9.7831--9.5092--9.2373--8.9663--8.6952--8.4228--8.1479--7.8689--7.5841--7.2916--6.9887--6.6719--6.3364--5.9754--5.5778--5.4924--5.4046--5.3142--5.2209--5.1242--5.024--4.9195--4.8104--4.6958--4.5748--4.4463--4.3087--4.16--3.9972--3.8157--3.6087--3.3634--3.0535--2.6032--")
        linesTabJi.add("12--28.2997--26.217--24.9628--24.0539--23.3367--22.7418--22.2321--21.7851--21.3864--21.0261--20.6968--20.3934--20.1118--19.8488--19.602--19.3692--19.1488--18.9395--18.74--18.5493--17.7033--16.9893--16.367--15.812--15.3085--14.8454--14.4149--14.0111--13.6294--13.2661--12.9184--12.5838--12.2604--11.9463--11.6401--11.3403--11.0458--10.7553--10.4677--10.182--9.897--9.6115--9.3244--9.0343--8.7396--8.4384--8.1286--7.8073--7.4708--7.1138--6.7288--6.3038--6.2124--6.1183--6.0214--5.9212--5.8175--5.7098--5.5975--5.48--5.3565--5.226--5.0873--4.9385--4.7775--4.6009--4.4038--4.1783--3.9103--3.5706--3.0738--")
        linesTabJi.add("13--29.8193--27.6882--26.4034--25.4715--24.7356--24.1249--23.6015--23.1423--22.7326--22.362--22.0234--21.7113--21.4215--21.1507--20.8966--20.6568--20.4298--20.214--20.0084--19.8119--18.9392--18.202--17.5588--16.9848--16.4636--15.9839--15.5376--15.1187--14.7224--14.3451--13.9836--13.6356--13.2989--12.9717--12.6525--12.3398--12.0323--11.7288--11.4281--11.1291--10.8307--10.5315--10.2303--9.9257--9.6159--9.2991--8.9727--8.6339--8.2784--7.9008--7.4929--7.0415--6.9443--6.8442--6.741--6.6343--6.5238--6.4088--6.289--6.1635--6.0315--5.8919--5.7432--5.5838--5.4109--5.221--5.0087--4.7654--4.4757--4.1069--3.565--")
        linesTabJi.add("14--31.3194--29.1412--27.8268--26.8727--26.1189--25.4931--24.9564--24.4854--24.0651--23.6848--23.3371--23.0166--22.7189--22.4408--22.1795--21.9331--21.6996--21.4778--21.2663--21.0641--20.1658--19.4062--18.7431--18.1508--17.6126--17.1169--16.6555--16.2221--15.8118--15.4209--15.0463--14.6853--14.3359--13.9961--13.6644--13.3393--13.0194--12.7034--12.3902--12.0785--11.7671--11.4548--11.1401--10.8215--10.4973--10.1653--9.8231--9.4673--9.0937--8.6963--8.2662--7.7895--7.6867--7.5809--7.4716--7.3587--7.2415--7.1197--6.9925--6.8593--6.7191--6.5706--6.4125--6.2426--6.0583--5.8556--5.6287--5.3682--5.0573--4.6604--4.0747--")
        linesTabJi.add("15--32.8015--30.578--29.2349--28.2595--27.4884--26.848--26.2985--25.8161--25.3855--24.9958--24.6395--24.3108--24.0055--23.7202--23.4522--23.1992--22.9597--22.7319--22.5148--22.3071--21.3841--20.603--19.9206--19.3107--18.7561--18.2451--17.7691--17.3217--16.898--16.494--16.1066--15.7332--15.3715--15.0197--14.676--14.3389--14.007--13.679--13.3537--13.0298--12.7059--12.3809--12.0532--11.7212--11.383--11.0365--10.679--10.307--9.9158--9.4993--9.0479--8.5468--8.4386--8.3271--8.2121--8.093--7.9695--7.841--7.7068--7.5661--7.4179--7.2609--7.0936--6.9137--6.7183--6.5032--6.2621--5.9849--5.6534--5.2294--4.6009--")
        linesTabJi.add("16--34.2671--31.9999--30.6292--29.6332--28.8453--28.1908--27.6289--27.1356--26.695--26.2962--25.9315--25.595--25.2824--24.9901--24.7155--24.4564--24.2108--23.9774--23.7547--23.5418--22.5949--21.7931--21.092--20.4651--19.8947--19.3689--18.8788--18.4179--17.9812--17.5646--17.165--16.7795--16.406--16.0425--15.6872--15.3385--14.9951--14.6555--14.3185--13.9827--13.6469--13.3096--12.9693--12.6243--12.2728--11.9122--11.5399--11.1521--10.7441--10.309--9.837--9.3122--9.1988--9.082--8.9613--8.8363--8.7067--8.5717--8.4307--8.2827--8.1269--7.9616--7.7854--7.5958--7.3896--7.1625--6.9077--6.6142--6.2628--5.8122--5.1422--")
        linesTabJi.add("17--35.7184--33.4087--32.0111--30.995--30.191--29.5227--28.9489--28.4449--27.9947--27.5871--27.2142--26.8701--26.5504--26.2514--25.9705--25.7053--25.454--25.215--24.9871--24.769--23.799--22.977--22.258--21.6146--21.0289--20.4887--19.9849--19.511--19.0617--18.633--18.2215--17.8244--17.4394--17.0646--16.698--16.3382--15.9836--15.6328--15.2845--14.9373--14.5898--14.2406--13.8882--13.5307--13.1661--12.7919--12.4053--12.0023--11.5778--11.1249--10.6329--10.0852--9.9667--9.8446--9.7184--9.5878--9.4522--9.3109--9.1633--9.0083--8.845--8.6718--8.4868--8.2878--8.0712--7.8324--7.5642--7.255--6.8842--6.4077--5.6973--")
        linesTabJi.add("18--37.1564--34.8052--33.3817--32.3462--31.5264--30.8447--30.2594--29.745--29.2855--28.8693--28.4885--28.137--27.8104--27.5049--27.2178--26.9467--26.6898--26.4455--26.2124--25.9894--24.997--24.1555--23.419--22.7595--22.1591--21.6049--21.0879--20.6014--20.1399--19.6993--19.2763--18.8679--18.4718--18.086--17.7086--17.3379--16.9724--16.6108--16.2515--15.8932--15.5345--15.1738--14.8095--14.4399--14.0626--13.6753--13.2747--12.857--12.4166--11.9462--11.4349--10.8649--10.7416--10.6143--10.4829--10.3467--10.2053--10.0579--9.9038--9.7421--9.5715--9.3904--9.1971--8.9889--8.7622--8.512--8.2307--7.9062--7.5165--7.0149--6.2648--")
        linesTabJi.add("19--38.5821--36.1908--34.7419--33.6874--32.8523--32.1577--31.561--31.0367--30.568--30.1435--29.755--29.3964--29.063--28.7512--28.4581--28.1813--27.919--27.6695--27.4314--27.2036--26.1893--25.3289--24.5753--23.9004--23.2855--22.7178--22.188--21.6891--21.2158--20.7638--20.3295--19.9102--19.5034--19.1069--18.7189--18.3376--17.9617--17.5894--17.2195--16.8504--16.4808--16.1089--15.7332--15.3517--14.9621--14.562--14.1479--13.7158--13.26--12.7727--12.2425--11.6509--11.5228--11.3906--11.254--11.1124--10.9653--10.812--10.6517--10.4833--10.3056--10.117--9.9155--9.6983--9.4617--9.2004--8.9065--8.567--8.1589--7.6327--6.8439--")
        linesTabJi.add("20--39.9969--37.5663--36.0926--35.0196--34.1696--33.4623--32.8547--32.3206--31.843--31.4104--31.0144--30.6488--30.3089--29.991--29.692--29.4097--29.142--28.8874--28.6444--28.412--27.3765--26.4976--25.7275--25.0375--24.4086--23.8277--23.2854--22.7745--22.2897--21.8265--21.3813--20.9514--20.534--20.1272--19.7289--19.3374--18.9512--18.5687--18.1884--17.8088--17.4285--17.0458--16.6589--16.2659--15.8644--15.4518--15.0246--14.5784--14.1076--13.6039--13.0553--12.4426--12.3098--12.1728--12.0311--11.8843--11.7317--11.5727--11.4062--11.2314--11.0468--10.8508--10.6413--10.4154--10.1691--9.8971--9.5908--9.2367--8.8105--8.2604--7.4338--")
        linesTabJi.add("21--41.4009--38.9322--37.4345--36.3434--35.4789--34.7593--34.1409--33.5972--33.1111--32.6706--32.2673--31.8949--31.5486--31.2246--30.92--30.6322--30.3594--30.0998--29.8521--29.6151--28.5589--27.662--26.8759--26.1711--25.5285--24.9348--24.3803--23.8578--23.3617--22.8876--22.4319--21.9915--21.5639--21.147--20.7387--20.3372--19.941--19.5485--19.1581--18.7683--18.3776--17.9843--17.5865--17.1823--16.7692--16.3444--15.9044--15.4446--14.9591--14.4393--13.8728--13.2396--13.1023--12.9605--12.814--12.662--12.5041--12.3394--12.167--11.9858--11.7945--11.5913--11.374--11.1395--10.8839--10.6013--10.2829--9.9145--9.4708--8.8972--8.0336--")
        linesTabJi.add("22--42.7957--40.2894--38.7681--37.6595--36.7807--36.0491--35.4203--34.8672--34.3726--33.9245--33.514--33.135--32.7825--32.4526--32.1424--31.8494--31.5715--31.3071--31.0548--30.8133--29.7369--28.8224--28.0206--27.3015--26.6455--26.0393--25.4729--24.939--24.432--23.9473--23.4812--23.0307--22.5931--22.1663--21.7482--21.337--20.9311--20.5288--20.1285--19.7288--19.3279--18.9243--18.5159--18.1007--17.6763--17.2396--16.7871--16.314--15.8142--15.2787--14.6948--14.0415--13.8997--13.7534--13.602--13.4451--13.2819--13.1117--12.9335--12.7461--12.5483--12.338--12.1131--11.8703--11.6055--11.3125--10.9823--10.6--10.139--9.5425--8.6427--")
        linesTabJi.add("23--44.1814--41.6383--40.0941--38.9683--38.0756--37.3323--36.6932--36.131--35.6282--35.1725--34.7551--34.3696--34.011--33.6754--33.3597--33.0616--32.7788--32.5096--32.2527--32.0069--30.9108--29.9792--29.162--28.4288--27.7598--27.1413--26.5633--26.0184--25.5006--25.0055--24.5293--24.0689--23.6216--23.1852--22.7576--22.3369--21.9214--21.5095--21.0997--20.6902--20.2795--19.8657--19.447--19.0211--18.5855--18.1373--17.6726--17.1865--16.6726--16.1219--15.5209--14.848--14.7019--14.551--14.395--14.2331--14.0648--13.8892--13.7053--13.512--13.3077--13.0905--12.8581--12.6072--12.3334--12.0303--11.6885--11.2926--10.8147--10.1957--9.2604--")
        linesTabJi.add("24--45.5584--42.9798--41.4129--40.2703--39.3641--38.6093--37.9601--37.3891--36.8782--36.415--35.9908--35.5989--35.2344--34.8932--34.5723--34.269--33.9814--33.7077--33.4464--33.1962--32.0809--31.1325--30.3002--29.5533--28.8716--28.2412--27.6518--27.096--26.5678--26.0625--25.5764--25.1064--24.6495--24.2037--23.7667--23.3367--22.912--22.4908--22.0715--21.6525--21.2321--20.8084--20.3795--19.9432--19.4968--19.0373--18.5606--18.0618--17.5343--16.9686--16.3508--15.6587--15.5083--15.3531--15.1925--15.0259--14.8525--14.6716--14.4822--14.2829--14.0723--13.8484--13.6087--13.3498--13.0672--12.7543--12.4011--11.9918--11.4974--10.8563--9.8862--")
        linesTabJi.add("25--46.928--44.314--42.7252--41.566--40.6465--39.8804--39.2214--38.6417--38.1228--37.6525--37.2216--36.8235--36.4531--36.1065--35.7803--35.4721--35.1798--34.9015--34.6359--34.3816--33.2473--32.2825--31.4355--30.6752--29.981--29.3388--28.7384--28.1719--27.6335--27.1183--26.6226--26.143--25.6769--25.2218--24.7757--24.3366--23.9027--23.4724--23.0439--22.6156--22.1857--21.7524--21.3136--20.867--20.41--19.9393--19.451--18.9397--18.3988--17.8184--17.1843--16.4734--16.3189--16.1594--15.9942--15.8229--15.6447--15.4586--15.2637--15.0587--14.8419--14.6114--14.3645--14.0978--13.8066--13.4839--13.1197--12.6973--12.1867--11.524--10.5196--")
        linesTabJi.add("26--48.2898--45.6416--44.0312--42.8558--41.9231--41.1461--40.4774--39.8891--39.3625--38.8851--38.4477--38.0435--37.6674--37.3154--36.9841--36.6711--36.3741--36.0914--35.8216--35.5632--34.4104--33.4295--32.5681--31.7946--31.0882--30.4346--29.8232--29.2463--28.6978--28.173--27.6677--27.1789--26.7036--26.2395--25.7845--25.3365--24.8937--24.4544--24.0169--23.5794--23.1403--22.6975--22.249--21.7924--21.325--20.8434--20.3436--19.8202--19.2661--18.6714--18.0212--17.2919--17.1333--16.9695--16.8--16.6241--16.441--16.2499--16.0497--15.839--15.6162--15.3792--15.1253--14.8509--14.5512--14.219--13.8439--13.4086--12.8821--12.1982--11.1602--")
        linesTabJi.add("27--49.645--46.9628--45.3311--44.1399--43.1945--42.4066--41.7285--41.1318--40.5977--40.1133--39.6694--39.2593--38.8776--38.5202--38.184--37.8662--37.5647--37.2777--37.0036--36.7412--35.5703--34.5736--33.6981--32.9117--32.1933--31.5284--30.9064--30.3193--29.761--29.2266--28.712--28.2141--27.7299--27.2569--26.7931--26.3363--25.8848--25.4367--24.9904--24.544--24.0957--23.6437--23.1856--22.7192--22.2416--21.7494--21.2383--20.703--20.136--19.5272--18.8613--18.1139--17.9513--17.7834--17.6096--17.4291--17.2414--17.0453--16.8398--16.6235--16.3948--16.1514--15.8906--15.6088--15.3007--14.9592--14.5734--14.1254--13.5833--12.8785--11.8077--")
        linesTabJi.add("28--50.9936--48.2782--46.6255--45.4188--44.4608--43.6622--42.9749--42.3699--41.8283--41.3372--40.887--40.471--40.0838--39.7213--39.3801--39.0577--38.7517--38.4604--38.1823--37.9159--36.7272--35.715--34.8256--34.0266--33.2964--32.6205--31.988--31.3909--30.8229--30.2791--29.7555--29.2486--28.7556--28.274--27.8016--27.3362--26.8761--26.4195--25.9644--25.5092--25.0521--24.5909--24.1235--23.6475--23.1598--22.6572--22.1351--21.588--21.0084--20.3857--19.7044--18.9392--18.7728--18.6008--18.4227--18.2378--18.0454--17.8444--17.6338--17.4121--17.1775--16.9279--16.6603--16.3711--16.0549--15.7042--15.3079--14.8475--14.29--13.5647--12.4613--")
        linesTabJi.add("29--52.3355--49.5878--47.9147--46.6926--45.7223--44.9132--44.2169--43.6038--43.0548--42.5569--42.1006--41.6789--41.2863--40.9187--40.5727--40.2456--39.9353--39.6398--39.3577--39.0875--37.8812--36.8538--35.9509--35.1394--34.3977--33.7109--33.0681--32.4612--31.8837--31.3308--30.7982--30.2825--29.7809--29.2908--28.8099--28.3361--27.8676--27.4025--26.9389--26.4751--26.0092--25.5391--25.0625--24.577--24.0795--23.5666--23.0337--22.4751--21.883--21.2468--20.5503--19.7677--19.5974--19.4214--19.2392--19.05--18.853--18.6472--18.4315--18.2044--17.9641--17.7084--17.4342--17.1377--16.8134--16.4538--16.0471--15.5745--15.0019--14.2564--13.1211--")
        linesTabJi.add("30--53.6719--50.8922--49.1988--47.9618--46.9792--46.16--45.4546--44.8335--44.2774--43.773--43.3106--42.8831--42.4852--42.1126--41.7619--41.4303--41.1157--40.8161--40.53--40.256--39.0326--37.9902--37.0739--36.2502--35.4972--34.7997--34.1468--33.5302--32.9435--32.3815--31.8401--31.3159--30.8058--30.3073--29.8181--29.336--28.8592--28.3858--27.9139--27.4416--26.9671--26.4881--26.0026--25.5078--25.0007--24.4776--23.9341--23.3641--22.7599--22.1103--21.3989--20.5992--20.4251--20.2452--20.0588--19.8654--19.6639--19.4534--19.2327--19.0004--18.7545--18.4927--18.212--17.9083--17.5761--17.2076--16.7908--16.3062--15.7188--14.9535--13.7867--")
        linesTabJi.add("40--66.766--63.6908--61.8117--60.4361--59.3417--58.4278--57.6401--56.9459--56.3235--55.7585--55.2401--54.7606--54.3139--53.8952--53.501--53.128--52.7738--52.4364--52.114--51.805--50.4236--49.2438--48.2046--47.2685--46.4113--45.616--44.8703--44.1649--43.4926--42.8477--42.2256--41.6222--41.0343--40.4589--39.8934--39.3353--38.7826--38.2328--37.684--37.134--36.5803--36.0207--35.4522--34.8719--34.2761--33.6603--33.019--32.3449--31.6286--30.8563--30.0078--29.0505--28.8416--28.6255--28.4014--28.1686--27.9258--27.672--27.4055--27.1245--26.8268--26.5093--26.1684--25.7989--25.394--24.9437--24.4331--23.8376--23.113--22.1642--20.7066--")
        linesTabJi.add("50--79.4898--76.1538--74.1111--72.6132--71.4202--70.4229--69.5627--68.8039--68.1232--67.5048--66.9372--66.4117--65.922--65.4629--65.0303--64.6209--64.2319--63.8612--63.5068--63.1671--61.6466--60.346--59.1986--58.1638--57.215--56.3336--55.5062--54.7228--53.9753--53.2576--52.5645--51.8916--51.2353--50.5923--49.9597--49.3349--48.7154--48.0986--47.4822--46.8638--46.2406--45.61--44.9688--44.3133--43.6395--42.9421--42.2148--41.4492--40.6342--39.7539--38.7848--37.6886--37.449--37.201--36.9438--36.6762--36.3971--36.105--35.7981--35.4743--35.1308--34.7642--34.3702--33.9426--33.4734--32.9509--32.3574--31.6638--30.8179--29.7067--27.9908--")
        linesTabJi.add("60--91.9518--88.3794--86.1882--84.5799--83.2977--82.2251--81.2992--80.482--79.7486--79.082--78.4697--77.9029--77.3743--76.8785--76.4113--75.9689--75.5485--75.1477--74.7645--74.397--72.7509--71.3411--70.0961--68.9721--67.9405--66.9815--66.0804--65.2265--64.4112--63.6277--62.8705--62.1348--61.4168--60.7128--60.0197--59.3347--58.6548--57.9775--57.3002--56.62--55.9341--55.2394--54.5324--53.8091--53.0649--52.2938--51.4889--50.6406--49.7365--48.7587--47.6805--46.4589--46.1915--45.9147--45.6274--45.3285--45.0165--44.6898--44.3464--43.9838--43.599--43.188--42.7458--42.2656--41.7383--41.1503--40.4817--39.6994--38.7435--37.4848--35.5344--")
        linesTabJi.add("70--104.2148--100.4251--98.0975--96.3875--95.0231--93.8813--92.895--92.0241--91.2422--90.5313--89.8781--89.2731--88.7088--88.1794--87.6802--87.2076--86.7583--86.3299--85.92--85.527--83.7654--82.2553--80.9206--79.7147--78.6071--77.5766--76.6079--75.6893--74.8116--73.9677--73.1516--72.3583--71.5836--70.8236--70.0749--69.3345--68.5993--67.8664--67.133--66.3961--65.6526--64.899--64.1316--63.346--62.537--61.6983--60.822--59.8978--58.9118--57.8443--56.6659--55.3289--55.0361--54.7327--54.4178--54.09--53.7478--53.3893--53.0123--52.6141--52.1911--51.7393--51.2528--50.7243--50.1434--49.4953--48.7575--47.8934--46.8361--45.4417--43.2753--")
        linesTabJi.add("80--116.3209--112.3288--109.8741--108.0693--106.6285--105.422--104.3796--103.4588--102.6317--101.8795--101.1882--100.5477--99.9502--99.3895--98.8606--98.3598--97.8837--97.4295--96.995--96.5782--94.7091--93.1058--91.6875--90.4053--89.2271--88.1303--87.0986--86.1197--85.1841--84.284--83.4131--82.5663--81.7387--80.9266--80.1263--79.3343--78.5476--77.7631--76.9776--76.1879--75.3908--74.5825--73.7589--72.9153--72.0461--71.1445--70.2018--69.207--68.1447--66.9938--65.7221--64.2778--63.9612--63.6332--63.2926--62.938--62.5676--62.1795--61.7712--61.3397--60.8814--60.3915--59.8638--59.2902--58.6595--57.9553--57.1532--56.2128--55.0613--53.54--51.1719--")
        linesTabJi.add("90--128.2987--124.1162--121.5424--119.6484--118.1359--116.8688--115.7735--114.8057--113.9363--113.1452--112.4182--111.7444--111.1156--110.5255--109.9688--109.4415--108.9401--108.4617--108.0041--107.565--105.5951--103.904--102.4074--101.0537--99.8091--98.6499--97.5591--96.5238--95.5337--94.5809--93.6586--92.7614--91.8844--91.0234--90.1745--89.3342--88.4992--87.6661--86.8317--85.9925--85.1451--84.2854--83.4091--82.5111--81.5854--80.6247--79.6197--78.5584--77.4247--76.1954--74.8362--73.2911--72.9522--72.601--72.2363--71.8564--71.4596--71.0436--70.606--70.1433--69.6517--69.126--68.5596--67.9438--67.2661--66.5092--65.6466--64.6347--63.3942--61.754--59.1963--")
        linesTabJi.add("100--140.1697--135.8069--133.1196--131.1417--129.5613--128.2367--127.0915--126.0793--125.1698--124.3421--123.5812--122.8759--122.2175--121.5996--121.0166--120.4643--119.939--119.4378--118.9582--118.498--116.4327--114.6588--113.0881--111.6667--110.3593--109.1412--107.9946--106.9058--105.8642--104.8615--103.8907--102.9459--102.0221--101.1149--100.2201--99.3341--98.4534--97.5744--96.6938--95.8078--94.9128--94.0046--93.0784--92.129--91.1498--90.1332--89.0693--87.9453--86.7439--85.4406--83.9985--82.3581--81.9982--81.6251--81.2375--80.8338--80.4119--79.9697--79.5042--79.012--78.489--77.9294--77.3265--76.6705--75.9485--75.1418--74.2219--73.1423--71.8177--70.065--67.3275--")
        linesTabJi.add("110--151.9482--147.4143--144.6197--142.5617--140.9165--139.5375--138.3448--137.2904--136.3427--135.4802--134.6871--133.9517--133.2653--132.6209--132.0129--131.4367--130.8888--130.3658--129.8654--129.3852--127.2291--125.3764--123.7352--122.2495--120.8825--119.6084--118.4086--117.269--116.1785--115.1284--114.1114--113.1214--112.1531--111.2018--110.2635--109.3341--108.4099--107.4873--106.5627--105.6323--104.692--103.7376--102.764--101.7656--100.7357--99.666--98.5461--97.3624--96.0967--94.7229--93.2021--91.471--91.091--90.6971--90.2878--89.8613--89.4157--88.9485--88.4566--87.9363--87.3833--86.7916--86.1538--85.4598--84.6956--83.8415--82.8671--81.7227--80.3184--78.4582--75.5498--")
        linesTabJi.add("120--163.6485--158.95--156.053--153.9182--152.2113--150.7802--149.5422--148.4474--147.4633--146.5673--145.7434--144.9795--144.2663--143.5966--142.9646--142.3657--141.7961--141.2524--140.732--140.2326--137.9899--136.062--134.3534--132.8063--131.3822--130.0546--128.804--127.6159--126.4787--125.3833--124.3222--123.289--122.2782--121.285--120.3049--119.334--118.3683--117.4041--116.4375--115.4646--114.4811--113.4825--112.4637--111.4186--110.3401--109.2197--108.0462--106.8056--105.4784--104.0374--102.4413--100.6236--100.2245--99.8106--99.3806--98.9324--98.4641--97.9729--97.4557--96.9087--96.3271--95.7046--95.0335--94.303--93.4986--92.5991--91.5726--90.3668--88.8859--86.9233--83.8517--")



        jiTable = Array<Array<String?>>(linesTabJi.size) {
            arrayOfNulls<String>(
                72
            )
        }

        for (i in 0 until linesTabJi.size) {
            val auxLine = linesTabJi[i].split("--")
            for (j in auxLine.indices) {
                if (auxLine[j].isNotEmpty()){
                    this.jiTable[i][j] = auxLine[j]
                }
            }
        }
    }


    fun obtainZValueFromRightTailOfNormalProbability(confidenceGrade: Float): Float? {
        return getZValueFromProbabilityTableWithNoLibertyGrades(
            this.tabz,
            confidenceGrade
        )
    }

    fun obtainZValueFromCumulativeNormalProbability(confidenceGrade: Float): Float? {
        return getZValueFromProbabilityTableWithNoLibertyGrades(
            this.cumulativeNormalProbabilityTable,
            confidenceGrade
        )
    }

    fun obtainZValueFromTStudentProbability(confidenceGrade: Float, libertyGrade: Int): Float? {
        return getZValueFromProbabilityTableWithLibertyGradesAndNoFisher(
            this.tStudentTable,
            confidenceGrade,
            libertyGrade
        )
    }

    fun obtainProbabilityValueFromTStudentProbability(zValue: Float, libertyGrade: Int): Float? {
        return getProbabilityValueFromTableWithLibertyGradesAndNoFisher(
            this.tStudentTable,
            zValue,
            libertyGrade
        )
    }

    fun obtainProbabilityValueFromJiProbability(zValue: Float, libertyGrade: Int) : Float?{
        return getProbabilityValueFromTableWithLibertyGradesAndNoFisher(
            this.jiTable,
            zValue,
            libertyGrade
        )
    }

    private fun isDesiredValueBetweenCurrentAndNext(desired:Float,current:Float,next:Float):Boolean{
        return (current < desired && desired < next || current > desired && desired > next)
    }


    private fun getZValueFromProbabilityTableWithNoLibertyGrades(probabilityDistributionTable:Array<Array<String?>>,probabilityValue:Float):Float?{
        probabilityDistributionTable.forEachIndexed { fileIndex, columns ->

            columns.forEachIndexedFromOne { columnIndex, columnValue ->
                val convertedValue = columnValue!!.toFloatOrNull()
                if(convertedValue != null){
                    if (convertedValue == probabilityValue){
                        val zValueForFile = probabilityDistributionTable[fileIndex][0]!!.toFloat()
                        val zValueForColumn = probabilityDistributionTable[0][columnIndex]!!.toFloat()
                        return zValueForFile + zValueForColumn
                    }else{
                        //TODO add support for read new tables

                        if (columnIndex < probabilityDistributionTable[0].size - 1 && fileIndex < probabilityDistributionTable.size - 1){

                            val nextConvertedValue = probabilityDistributionTable[fileIndex][columnIndex + 1]!!.toFloat()

                            if (isDesiredValueBetweenCurrentAndNext(
                                    desired = probabilityValue,
                                    current = convertedValue,
                                    next = nextConvertedValue
                                )){

                                val zValueForCurrentFile = probabilityDistributionTable[fileIndex][0]!!.toFloat()
                                val zValueForCurrentColumn = probabilityDistributionTable[0][columnIndex]!!.toFloat()

                                val zValueForNextColumn = probabilityDistributionTable[0][columnIndex + 1]!!.toFloat()

                                val x0 = if (zValueForCurrentFile>0){
                                    zValueForCurrentFile + zValueForCurrentColumn
                                }else{
                                    zValueForCurrentFile - zValueForCurrentColumn
                                }

                                val x1 = if (zValueForCurrentFile>0){
                                    zValueForCurrentFile + zValueForNextColumn
                                }else{
                                    zValueForCurrentFile - zValueForNextColumn
                                }


                                return interpolation(
                                    x0,
                                    x1,
                                    convertedValue,
                                    nextConvertedValue,
                                    probabilityValue
                                )

                            }

                        }else{
                            if (columnIndex == probabilityDistributionTable[0].size - 1 && fileIndex < probabilityDistributionTable.size - 1){

                                val nextConvertedValue = probabilityDistributionTable[fileIndex + 1][1]!!.toFloat()

                                if (isDesiredValueBetweenCurrentAndNext(
                                        desired = probabilityValue,
                                        current = convertedValue,
                                        next = nextConvertedValue
                                    )){

                                    val zValueForCurrentFile = probabilityDistributionTable[fileIndex][0]!!.toFloat()
                                    val zValueForCurrentColumn = probabilityDistributionTable[0][columnIndex]!!.toFloat()
                                    val zValueForNextColumn = probabilityDistributionTable[fileIndex + 1][1]!!.toFloat()

                                    val x0 = if (zValueForCurrentFile>0){
                                        zValueForCurrentFile + zValueForCurrentColumn
                                    }else{
                                        zValueForCurrentFile - zValueForCurrentColumn
                                    }

                                    val x1 = if (zValueForCurrentFile>0){
                                        zValueForCurrentFile + zValueForNextColumn
                                    }else{
                                        zValueForCurrentFile - zValueForNextColumn
                                    }


                                    return interpolation(
                                        x0,
                                        x1,
                                        convertedValue,
                                        nextConvertedValue,
                                        probabilityValue
                                    )

                                }

                            }
                        }
                    }
                }

            }


        }

        return null
    }

    private fun getZValueFromProbabilityTableWithLibertyGradesAndNoFisher(probabilityDistributionTable:Array<Array<String?>>,probabilityValue:Float, libertyGrade:Int):Float?{

        val rowIndex = probabilityDistributionTable.indexOfFirst { row ->
            val valueExistent = row.find {
                it == libertyGrade.toString()
            }
            valueExistent != null
        }

        if (rowIndex != -1) { // Liberty grades exists in table not interpolation necessary
            val row = probabilityDistributionTable[rowIndex]
            val columnIndex = row.indexOfFirst { it == probabilityValue.toString() }
            if (columnIndex != -1) {
                return probabilityDistributionTable[rowIndex][columnIndex]!!.toFloat()
            }else{ //interpolation necessary

                probabilityDistributionTable[rowIndex].forEachIndexedFromOne { currentColumnIndex, columnValue ->
                    if (currentColumnIndex < probabilityDistributionTable[rowIndex].size - 1){
                        val nextColumnValue = probabilityDistributionTable[rowIndex][currentColumnIndex + 1]
                        if (isDesiredValueBetweenCurrentAndNext(
                                desired = probabilityValue,
                                current = columnValue!!.toFloat(),
                                next = nextColumnValue!!.toFloat()
                            )){
                            return interpolation(
                                x1 = columnValue.toFloat(),
                                x2 = nextColumnValue.toFloat(),
                                y1 = probabilityDistributionTable[rowIndex][currentColumnIndex]!!.toFloat(),
                                y2 = probabilityDistributionTable[rowIndex][currentColumnIndex + 1]!!.toFloat(),
                                knownValue = probabilityValue
                            )
                        }
                    }else if (currentColumnIndex == probabilityDistributionTable[rowIndex].size - 1){
                        return columnValue!!.toFloatOrNull()
                    }
                }

            }
        }else{ //Liberty grades not exists explicit in table

            val lastLibertyGrade = probabilityDistributionTable[probabilityDistributionTable.size-1][0]!!.toInt()
            val lastLibertyGradeIndex = probabilityDistributionTable.size-1

            if (libertyGrade > lastLibertyGrade){ //Desired liberty grades not exists in table
                return null
            }else{

                probabilityDistributionTable.forEachIndexed { fileIndex, columns ->

                    if (fileIndex < lastLibertyGradeIndex){

                        val nextLibertyGrade = probabilityDistributionTable[fileIndex + 1][0]!!.toInt()

                        if (libertyGrade in (fileIndex + 1)..<nextLibertyGrade){
                            columns.forEachIndexedFromOne { columnIndex, columnValue ->

                                val columnValueFloat = columnValue!!.toFloatOrNull()
                                if (columnValueFloat != null){
                                    if (probabilityValue == columnValueFloat || columnIndex == columns.size - 1){

                                        val zValueForFirstFile = probabilityDistributionTable[fileIndex][columnIndex]!!.toFloat()
                                        val zValueForSecondFile = probabilityDistributionTable[fileIndex + 1][columnIndex]!!.toFloat()

                                        return interpolation(
                                            x1 = libertyGrade.toFloat(),
                                            x2 = nextLibertyGrade.toFloat(),
                                            y1 = zValueForFirstFile,
                                            y2 = zValueForSecondFile,
                                            knownValue = libertyGrade.toFloat()
                                        )

                                    }else if(columnIndex < columns.size - 1){

                                        if (isDesiredValueBetweenCurrentAndNext(
                                                desired = probabilityValue,
                                                current = columnValueFloat,
                                                next = columns[columnIndex + 1]!!.toFloat()
                                            )){
                                            val zValueForFirstFileInFirstProb = probabilityDistributionTable[fileIndex][columnIndex]!!.toFloat()
                                            val zValueForSecondFileInFirstProb = probabilityDistributionTable[fileIndex + 1][columnIndex]!!.toFloat()

                                            val firstInterpolation = interpolation(
                                                x1 = libertyGrade.toFloat(),
                                                x2 = nextLibertyGrade.toFloat(),
                                                y1 = zValueForFirstFileInFirstProb,
                                                y2 = zValueForSecondFileInFirstProb,
                                                knownValue = libertyGrade.toFloat()
                                            )

                                            val zValueForFirstFileInSecondProb = probabilityDistributionTable[fileIndex][columnIndex + 1]!!.toFloat()
                                            val zValueForSecondFileInSecondProb = probabilityDistributionTable[fileIndex + 1][columnIndex + 1]!!.toFloat()

                                            val secondInterpolation = interpolation(
                                                x1 = libertyGrade.toFloat(),
                                                x2 = nextLibertyGrade.toFloat(),
                                                y1 = zValueForFirstFileInSecondProb,
                                                y2 = zValueForSecondFileInSecondProb,
                                                knownValue = libertyGrade.toFloat()
                                            )

                                            return interpolation(
                                                x1 = libertyGrade.toFloat(),
                                                x2 = nextLibertyGrade.toFloat(),
                                                y1 = firstInterpolation,
                                                y2 = secondInterpolation,
                                                knownValue = libertyGrade.toFloat()
                                            )

                                        }

                                    }
                                }

                            }
                        }

                    }else{

                        columns.forEachIndexedFromOne { columnIndex, columnValue ->
                            val columnValueFloat = columnValue!!.toFloatOrNull()
                            if (columnValueFloat != null){
                                if (probabilityValue == columnValueFloat || columnIndex == columns.size - 1){
                                    return columnValueFloat
                                }else{
                                    if (columnIndex < columns.size - 1){

                                        val nextColumnValue = columns[columnIndex + 1]!!.toFloat()

                                        if (isDesiredValueBetweenCurrentAndNext(desired = probabilityValue, current = columnValueFloat, next = nextColumnValue)){
                                            val firstZValue = probabilityDistributionTable[fileIndex][columnIndex]!!.toFloat()
                                            val secondZValue = probabilityDistributionTable[fileIndex][columnIndex + 1]!!.toFloat()

                                            return interpolation(
                                                x1 = columnValueFloat,
                                                x2 = nextColumnValue,
                                                y1 = firstZValue,
                                                y2 = secondZValue,
                                                knownValue = probabilityValue
                                            )

                                        }

                                    }
                                }
                            }
                        }

                    }

                }

            }
        }

        return null
    }


    private fun getProbabilityValueFromTableWithLibertyGradesAndNoFisher(probabilityDistributionTable:Array<Array<String?>>,zValue: Float, libertyGrade: Int):Float?{
        val libertyGradeIndex = probabilityDistributionTable.indexOfFirst { row ->
            row[0] == libertyGrade.toString()
        }
        if (libertyGradeIndex != -1) { //Liberty grades exists in table not interpolation necessary

            val columnIndex = probabilityDistributionTable[libertyGradeIndex].indexOfFirst {
                it == zValue.toString()
            }
            if (columnIndex != -1) { // Z value exists in table not interpolation necessary
                return probabilityDistributionTable[0][columnIndex]!!.toFloat()
            }else{
                probabilityDistributionTable[libertyGradeIndex].forEachIndexedFromOne { currentColumnIndex, columnValue ->
                    if (columnValue?.toFloatOrNull() != null){
                        if (currentColumnIndex < probabilityDistributionTable[libertyGradeIndex].size - 1){

                            val nextZColumnValue = probabilityDistributionTable[libertyGradeIndex][currentColumnIndex + 1]!!.toFloat()
                            val currentZColumnValue = columnValue.toFloat()


                            val currentProbValue = probabilityDistributionTable[0][currentColumnIndex]!!.toFloat()
                            val nextProbValue = probabilityDistributionTable[0][currentColumnIndex + 1]!!.toFloat()

                            if (isDesiredValueBetweenCurrentAndNext(desired = zValue, current = currentZColumnValue, next = nextZColumnValue)){

                                return interpolation(
                                    x1 = currentZColumnValue,
                                    x2 = nextZColumnValue,
                                    y1 = currentProbValue,
                                    y2 = nextProbValue,
                                    knownValue = zValue
                                )

                            }

                        }else if (currentColumnIndex == probabilityDistributionTable[libertyGradeIndex].size - 1){
                            return columnValue.toFloatOrNull()
                        }
                    }

                }
            }

        }else{

            probabilityDistributionTable.forEachIndexed { fileIndex, columns ->
                if (fileIndex < probabilityDistributionTable.size - 1){

                    val currentLibertyGrade = probabilityDistributionTable[fileIndex][0]!!.toInt()
                    val nextLibertyGrade = probabilityDistributionTable[fileIndex + 1][0]!!.toInt()

                    if (libertyGrade in currentLibertyGrade..nextLibertyGrade){

                        columns.forEachIndexedFromOne { columnIndex, columnValue ->
                            val columnValueFloat = columnValue!!.toFloatOrNull()
                            if (columnValueFloat != null){

                                if(columnIndex < columns.size - 1){

                                    val nextColumnValue = columns[columnIndex + 1]!!.toFloat()

                                    if (isDesiredValueBetweenCurrentAndNext(desired = zValue, current = columnValueFloat, next = nextColumnValue)){

                                        val firstProbValueForZ1 = probabilityDistributionTable[0][columnIndex]!!.toFloat()
                                        val secondProbValueForZ1 = probabilityDistributionTable[0][columnIndex + 1]!!.toFloat()

                                        val firstInterpolation = interpolation(
                                            x1 = columnValueFloat,
                                            x2 = nextColumnValue,
                                            y1 = firstProbValueForZ1,
                                            y2 = secondProbValueForZ1,
                                            knownValue = zValue
                                        )

                                        probabilityDistributionTable[fileIndex + 1].forEachIndexedFromOne { currentColumnIndex, currentColumnValue ->
                                            val currentColumnValueFloat = currentColumnValue!!.toFloatOrNull()
                                            if (currentColumnValueFloat != null){

                                                val nextCurrentColumnValue = probabilityDistributionTable[fileIndex + 1][currentColumnIndex + 1]!!.toFloat()
                                                if (isDesiredValueBetweenCurrentAndNext(desired = zValue, current = columnValueFloat, next = nextColumnValue)){

                                                    val firstProbValueForZ2 = probabilityDistributionTable[0][currentColumnIndex]!!.toFloat()
                                                    val secondProbValueForZ2 = probabilityDistributionTable[0][currentColumnIndex + 1]!!.toFloat()

                                                    val secondInterpolation = interpolation(
                                                        x1 = currentColumnValueFloat,
                                                        x2 = nextCurrentColumnValue,
                                                        y1 = firstProbValueForZ2,
                                                        y2 = secondProbValueForZ2,
                                                        knownValue = zValue
                                                    )

                                                    return interpolation(
                                                        x1 = currentLibertyGrade.toFloat(),
                                                        x2 = nextLibertyGrade.toFloat(),
                                                        y1 = firstInterpolation,
                                                        y2 = secondInterpolation,
                                                        knownValue = libertyGrade.toFloat()
                                                    )

                                                }
                                            }
                                        }

                                    }

                                }else if (zValue<columnValueFloat){
                                    return probabilityDistributionTable[0][columnIndex]!!.toFloat()
                                }

                            }
                        }

                    }

                }else{
                    probabilityDistributionTable[fileIndex].forEachIndexedFromOne { columnIndex, columnValue ->
                        val columnValueFloat = columnValue!!.toFloatOrNull()
                        if (columnValueFloat != null){
                            if (zValue == columnValueFloat){
                                return probabilityDistributionTable[0][columnIndex]!!.toFloat()
                            }else{
                                if (columnIndex < probabilityDistributionTable[fileIndex].size - 1){
                                    val nextColumnValue = probabilityDistributionTable[fileIndex][columnIndex + 1]!!.toFloat()
                                    if (isDesiredValueBetweenCurrentAndNext(desired = zValue, current = columnValueFloat, next = nextColumnValue)){
                                        return interpolation(
                                            x1 = columnValueFloat,
                                            x2 = nextColumnValue,
                                            y1 = probabilityDistributionTable[0][columnIndex]!!.toFloat(),
                                            y2 = probabilityDistributionTable[0][columnIndex + 1]!!.toFloat(),
                                            knownValue = zValue
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }

        return null
    }

    private fun interpolation(
        x1: Float,
        x2: Float,
        y1: Float,
        y2: Float,
        knownValue: Float
    ): Float {
        val y = y1 + (((y2 - y1) / (x2 - x1)) * (knownValue - x1))
        return Tools.roundValue(value = y, decimals= 5)
    }


    private inline fun <T> Array<T>.forEachIndexedFromOne(action: (index: Int, T) -> Unit) {
        for (i in 1 until this.size) {
            action(i, this[i])
        }
    }

}